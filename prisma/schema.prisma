generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Store {
  id String @id @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  createadAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categories Category[]
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])

  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[] @relation("CategoryToProduct")
}

model Size {
  id String @id @default(uuid())
  name String
  value String
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Color {
  id String @id @default(uuid())
  name String
  value String
  storeId String
  store Store @relation("StoreToColor", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[] 
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId], references: [id])

  name String
  price Decimal
  amount Int
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  sizeId String
  size Size @relation(fields: [sizeId], references: [id])

  colorId String
  color Color @relation(fields: [colorId], references: [id])

  images Image[]

  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(uuid())
  url String
  
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}